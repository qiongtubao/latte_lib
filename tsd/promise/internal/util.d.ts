declare var es5: any;
declare var canEvaluate: boolean;
declare var haveGetters: any;
declare var errorObj: {
    e: {};
};
declare var tryCatchTarget: any;
declare function tryCatcher(): any;
declare function tryCatch(fn: any): typeof tryCatcher;
declare var inherits: any;
declare function isPrimitive(val: any): boolean;
declare function isObject(value: any): boolean;
declare function maybeWrapAsError(maybeError: any): any;
declare function withAppended(target: any, appendee: any): any[];
declare function getDataPropertyOrDefault(obj: any, key: any, defaultValue: any): any;
declare function notEnumerableProp(obj: any, name: any, value: any): any;
declare function thrower(r: any): void;
declare var inheritedDataKeys: (obj: any) => any[];
declare var thisAssignmentPattern: RegExp;
declare function isClass(fn: any): boolean;
declare function toFastProperties(obj: any): any;
declare var rident: RegExp;
declare function isIdentifier(str: any): boolean;
declare function filledRange(count: any, prefix: any, suffix: any): any[];
declare function safeToString(obj: any): string;
declare function markAsOriginatingFromRejection(e: any): void;
declare function originatesFromRejection(e: any): boolean;
declare function canAttachTrace(obj: any): any;
declare var ensureErrorObject: (value: any) => any;
declare function classString(obj: any): any;
declare function copyDescriptors(from: any, to: any, filter: any): void;
declare var ret: {
    isClass: typeof isClass;
    isIdentifier: typeof isIdentifier;
    inheritedDataKeys: (obj: any) => any[];
    getDataPropertyOrDefault: typeof getDataPropertyOrDefault;
    thrower: typeof thrower;
    isArray: any;
    haveGetters: any;
    notEnumerableProp: any;
    isPrimitive: any;
    isObject: typeof isObject;
    canEvaluate: boolean;
    errorObj: {
        e: {};
    };
    tryCatch: typeof tryCatch;
    inherits: any;
    withAppended: typeof withAppended;
    maybeWrapAsError: any;
    toFastProperties: typeof toFastProperties;
    filledRange: typeof filledRange;
    toString: typeof safeToString;
    canAttachTrace: typeof canAttachTrace;
    ensureErrorObject: (value: any) => any;
    originatesFromRejection: typeof originatesFromRejection;
    markAsOriginatingFromRejection: typeof markAsOriginatingFromRejection;
    classString: typeof classString;
    copyDescriptors: typeof copyDescriptors;
    hasDevTools: boolean;
    isNode: boolean;
};
